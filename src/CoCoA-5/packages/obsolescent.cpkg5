Package $obsolescent

export AllReducedGroebnerBases;
export adjoint;
export AffHilbert;
export AffPoincare;
export Bin;
export CompleteToOrd;
export Fact;
export FactorAlgExt;
export Factorial;
export Hilbert;
export HomogElimMat;
export ID;
export ILogBase;
export isqrt;
export List;
// export insert; // builtin function
export log;
export Log;
export LogToTerm;
export minimalize;
export Minimalize;
export minimalized;
export Minimalized;
export Mod2Rat;
export FloatApprox10;
export MantissaAndExponent;
export Functions;
export Comp;
export MinGensGeneral;
export Poincare;
export PreImage;
export PrimaryDecomposition0;
export rank;
export Rank;
export ReadExpr;
export RingSet;
export SubalgebraRepr;
export TmpNBM;
export UniversalGroebnerBasis;
export WeightsMatrix;
  
----------------------------------------------------------------------

--  CallCount := Record[];  -- to reduce number of warnings
  
// ADDED: April 2014
// SUGGESTED EXPIRATION DATE: April 2015
Define List(M)
  If type(M) <> MAT Then
    error("\"List\" not implemented for type "+sprint(type(M)));
  EndIf;
--  if not("List" IsIn Fields($.CallCount)) then
--    $.CallCount.List := 0;
  PrintLn "--> WARNING: List(MATRIX) works but is obsolescent (from CoCoA-5.1.0).";
  PrintLn "--> WARNING: Please use \"GetRows(MATRIX)\" to get rid of this message.";
--  endif;
--  incr(ref $.CallCount.List);
  Return GetRows(M);
EndDefine; -- List

 
// ADDED April 2014
  // Suggested EXPIRATION DATE: April 2015
Define Mod2Rat(res, mod, DenomBound)
  PrintLn "--> WARNING: Mod2Rat is obsolescent (from CoCoA-5.1.0).";
  PrintLn "--> WARNING: Please use RatReconstructWithBounds instead.";
  NumerBound := div(mod,2*DenomBound);
  ans := RatReconstructWithBounds(0,NumerBound, DenomBound, [res], [mod]);
  If ans.failed Then Return 0; EndIf;
  Return ans.ReconstructedRat;
EndDefine; -- Mod2Rat

  
// renamed to adj
// ADDED March 2015
// Suggested expiration date: March 2016
define adjoint(M)
  PrintLn "--> WARNING: adjoint is obsolescent (from CoCoA-5.1.3); use adj instead";
  return adj(M);
enddefine; -- adjoint


// Was in approx.cpkg5
// ADDED April 2014
// Suggested EXPIRATION date: April 2015
// Update entry for "FloatApprox" when you delete this fn!!
Define FloatApprox10(N, RelativeError)
  PrintLn "--> WARNING: FloatApprox10 is obsolescent (from CoCoA-5.1.0); use FloatApprox (binary) instead";
  If type(N) <> INT And type(N) <> RAT Then error("FloatApprox10: first argument must be rational"); EndIf;
  If type(RelativeError) <> INT And type(RelativeError) <> RAT Then
    error("FloatApprox10: second argument must be rational");
  EndIf;
  If RelativeError <= 0 Or RelativeError > 0.1 Then RelativeError := 0.1; EndIf;
  If N = 0 Then Return 0; EndIf;
  Ndigits := 1;
  Power := 1/5;
  While Power > RelativeError Do
    Power := Power/10;
    incr(ref Ndigits);
  EndWhile;
  Tmp := MantissaAndExponent(N, Ndigits);
  Return Tmp.Mantissa*10^(Tmp.Exponent - Ndigits + 1);
EndDefine; -- FloatApprox10


// Was in float.cpkg5
// ADDED April 2014
// Suggested EXPIRATION date: April 2015  
Define MantissaAndExponent(X, SigFig)
  PrintLn "--> WARNING: MantissaAndExponent is obsolescent (from CoCoA-5.1.0).";
  PrintLn "--> WARNING: Please use MantissaAndExponent10 instead.";
  Return MantissaAndExponent10(X, SigFig);
EndDefine; -- MantissaAndExponent


// Was built-in
// ADDED May 2014
// Suggested EXPIRATION date: May 2015
Define Functions(str)
  PrintLn "--> WARNING: \"Functions\" is obsolete; instead please use the \"describe\" command.";
EndDefine; -- Functions


// Was in coclib.cpkg5
// ADDED May 2014
// Suggested EXPIRATION date: May 2016
Define Comp(...)
  TopLevel ERR;
  PrintLn "--> WARNING: \"Comp\" is obsolete (from CoCoA-5.1.0); instead please";
  PrintLn "--> WARNING: use [..] for indexing, or the field selector operator.";
  If len(ARGV) = 0 Then error(ERR.BAD_PARAMS_NUM); EndIf;
  X := ARGV[1];
  L := tail(ARGV);
  Foreach I In L Do
    If (type(X) IsIn [LIST, MODULEELEM, STRING] And type(I)=INT) Or
       (type(X)=RECORD And type(I)=STRING)  Then
      X := X[I];
    Else
      If not(type(X) IsIn [LIST, MODULEELEM, STRING, RECORD]) Then
	error("Comp: first argument must be in [LIST, MODULEELEM, STRING, RECORD]");
      Else
	error("Comp: arguments must be (LIST/MODULEELEM/STRING,INT) or (RECORD,STRING)");
      EndIf;
    EndIf;
  EndForeach;
  Return X;
EndDefine;


// Was in BackwardCompatible.cpkg5
// ADDED July 2014
// Suggested EXPIRATION date: July 2016
Define Poincare(X)
  PrintLn "--> WARNING: \"Poincare\" is obsolescent (from CoCoA-5.1.1)";
  PrintLn "--> WARNING: use \"HilbertSeries\" instead.";
  Return HilbertSeries(X);
EndDefine;

// Was in BackwardCompatible.cpkg5
// ADDED July 2014
// Suggested EXPIRATION date: July 2016
Define Hilbert(X)
  PrintLn "--> WARNING: \"Hilbert\" is obsolescent (from CoCoA-5.1.1)";
  PrintLn "--> WARNING: use \"HilbertFn\" instead.";
  Return HilbertFn(X);
EndDefine;

// Was in BackwardCompatible.cpkg5
// ADDED July 2014
// Suggested EXPIRATION date: July 2016
Define AffPoincare(M)
  PrintLn "--> WARNING: \"AffPoincare\" is obsolescent (from CoCoA-5.1.1)";
  PrintLn "--> WARNING: use \"AffHilbertSeries\" instead.";
  Return AffHilbertSeries(M);
EndDefine;

// Was in BackwardCompatible.cpkg5
// ADDED July 2014
// Suggested EXPIRATION date: July 2016
Define AffHilbert(...)
  PrintLn "--> WARNING: \"AffHilbert\" is obsolescent (from CoCoA-5.1.1)";
  PrintLn "--> WARNING: use \"AffHilbertFn\" instead.";
  Return AffHilbertFn(...);
EndDefine;

// builtin function: insert
// ADDED July 2014
// Suggested EXPIRATION date: July 2016  

  
// Was builtin
// ADDED July 2014
// Suggested EXPIRATION date: July 2016
Define WeightsMatrix(R)
  PrintLn "--> WARNING: \"WeightsMatrix\" is obsolescent (from CoCoA-5.1.1)";
  PrintLn "--> WARNING: use \"GradingMat\" instead.";
  Return GradingMat(R);
EndDefine;


// ADDED May 2015
// Suggested EXPIRATION date: May 2017
Define rank(M)
  PrintLn "--> WARNING: \"rank\" is obsolescent (from CoCoA-5.1.2)";
  PrintLn "--> WARNING: use \"rk\" instead.";
  Return rk(M);
EndDefine;

// ADDED May 2015
// Suggested EXPIRATION date: May 2017
Define Rank(M)
  PrintLn "--> WARNING: \"Rank\" is obsolescent (from CoCoA-5.1.2)";
  PrintLn "--> WARNING: use \"rk\" instead.";
  Return rk(M);
EndDefine;

// ADDED June 2015
// Suggested EXPIRATION date: June 2017
Define RingSet(M)
  PrintLn "--> WARNING: \"RingSet\" is obsolescent (from CoCoA-5.1.2)";
  PrintLn "--> WARNING: use \"RingsOf\" instead.";
  Return RingsOf(M);
EndDefine;

// ADDED May 2015
// Suggested EXPIRATION date: May 2017
Define MinGensGeneral(M)
  PrintLn "--> WARNING: \"MinGensGeneral\" is obsolescent (from CoCoA-5.1.2)";
  PrintLn "--> WARNING: use \"MinSubsetOfGens\" instead.";
  Return MinSubsetOfGens(M);
EndDefine;

// Was in BackwardCompatible.cpkg5
// ADDED July 2015
// Suggested EXPIRATION date: July 2017
Define PrimaryPoincare(I, Q)
  PrintLn "--> WARNING: \"PrimaryPoincare\" is obsolescent (from CoCoA-5.1.2)";
  PrintLn "--> WARNING: use \"PrimaryHilbertSeries\" instead.";
  Return PrimaryHilbertSeries(I, Q);
EndDefine;

// Was in BackwardCompatible.cpkg5
// ADDED July 2015
// Suggested EXPIRATION date: July 2017
Define ID(R)
  PrintLn "--> WARNING: \"ID\" is obsolescent (from CoCoA-5.1.2)";
  PrintLn "--> WARNING: use \"RingID\" instead.";
  Return RingID(R);
EndDefine;

// -------- CoCoA-5.1.3 ----------------------------------------------
// log/Log added Sept 2015.
// Suggested expiration date: Jan 2018
define log(t)
  PrintLn "--> WARNING: \"log\" is obsolescent (from CoCoA-5.1.3)";
  PrintLn "--> WARNING: use \"exponents\" instead.";
  return exponents(t);
enddefine; -- log

define Log(t)
  PrintLn "--> WARNING: \"Log\" is obsolescent (from CoCoA-5.1.3)";
  PrintLn "--> WARNING: use \"exponents\" instead.";
  return exponents(t);
enddefine; -- Log


// LogToTerm added Sept 2015.
// Suggested expiration date: Jan 2018
define LogToTerm(P, expv)
  PrintLn "--> WARNING: \"LogToTerm\" is obsolescent (from CoCoA-5.1.3)";
  PrintLn "--> WARNING: use \"MakeTerm\" instead.";
  return MakeTerm(P, expv);
enddefine; -- LogToTerm


// ILogBase added Nov 2015
// Suggested expiration date: Jan 2018
define ILogBase(N,base)
  PrintLn "--> WARNING: \"ILogBase\" is obsolescent (from CoCoA-5.1.3)";
  PrintLn "--> WARNING: use \"FloorLogBase\" or \"FloorLog2\" or \"FloorLog10\" instead.";
  return FloorLogBase(N,base);
enddefine; -- ILogBase


// isqrt added Nov 2015
// Suggested expiration date: Jan 2018
define isqrt(N)
  PrintLn "--> WARNING: \"isqrt\" is obsolescent (from CoCoA-5.1.3)";
  PrintLn "--> WARNING: use \"FloorSqrt\" instead.";
  return FloorSqrt(N);
enddefine; -- isqrt


// CompleteToOrd added Jan 2016
// Suggested expiration date: Jan 2018
define CompleteToOrd(M)
  PrintLn "--> WARNING: \"CompleteToOrd\" is obsolescent (from CoCoA-5.1.3)";
  PrintLn "--> WARNING: use \"MakeTermOrd\" instead.";
  return MakeTermOrd(M);
enddefine; -- CompleteToOrd

// from CoCoA-5.2.0 -------------------------------------------------------
  
// added Jul 2016
// Suggested expiration date: May 2019
define AllReducedGroebnerBases(I)
  PrintLn "--> WARNING: \"AllReducedGroebnerBases\" is obsolescent (from CoCoA-5.1.5)";
  PrintLn "--> WARNING: use \"GroebnerFanIdeals\" instead.";
  return GroebnerFanIdeals(I);
enddefine; -- AllReducedGroebnerBases

// added Jul 2016
// Suggested expiration date: May 2019
define UniversalGroebnerBasis(I)
  println "--> WARNING: \"UniversalGroebnerBasis\" is obsolescent (from CoCoA-5.1.5)";
  println "--> WARNING: use \"UniversalGBasis\" instead.";
  return UniversalGBasis(I);
enddefine; -- UniversalGroebnerBasis
  
// added Jul 2016
// Suggested expiration date: May 2019
define HomogElimMat(M, ElimInds)
  println "--> WARNING: \"HomogElimMat\" is obsolescent (from CoCoA-5.1.5)";
  println "--> WARNING: use \"ElimHomogMat(ElimInds, M)\" instead.";
  return ElimHomogMat(ElimInds, M);
enddefine; -- HomogElimMat

  
// added march 2017
// Suggested expiration date: May 2019
define TmpNBM(P, pts, toler)
  println "--> WARNING: \"TmpNBM\" is obsolescent (from CoCoA-5.1.5)";
  println "--> WARNING: use \"ApproxPointsNBM(P, pts, toler)\" instead.";
  return ApproxPointsNBM(P, pts, toler);
enddefine; -- TmpNBM  

// added april 2017
// Suggested expiration date: May 2019
define Bin(A,B)
  println "--> WARNING: \"Bin\" is obsolescent (from CoCoA-5.2.0)";
  println "--> WARNING: use \"binomial(A,B)\" instead.";
  return binomial(A,B);
enddefine; -- Bin

// added april 2017
// Suggested expiration date: May 2019
define Der(A,B)
  println "--> WARNING: \"Der\" is obsolescent (from CoCoA-5.2.0)";
  println "--> WARNING: use \"deriv(A,B)\" instead.";
  return deriv(A,B);
enddefine; -- Der

// added april 2017
// Suggested expiration date: May 2019
define ReadExpr(R,str)
  println "--> WARNING: \"ReadExpr\" is obsolescent (from CoCoA-5.2.0)";
  println "--> WARNING: use \"RingElem(R,str)\" instead.";
  return RingElem(R,str);
enddefine; -- Der

// added May 2017
// suggested expiration date; AS SOON AS POSSIBLE!!!
-- Rand() returns a random integer
-- Rand(X,Y) returns a random integer between X and Y
Define Rand(...)
  println "--> WARNING: \"Rand\" is obsolete";
  println "--> WARNING: use \"random\" instead";
  if len(ARGV)=0 then return random(-999,999); endif;
  if len(ARGV) <> 2 or type(ARGV[1]) <> INT or type(ARGV[2]) <> INT then
    error("Bad args for OBSOLETE fn \"Rand'");
  endif;
  return random(ARGV[1], ARGV[2]);
EndDefine; -- Rand

define PreImage(phi,y)
  println "--> WARNING: \"PreImage\" is obsolete";
  println "--> WARNING: use \"preimage\" or \"preimage0\" instead";
  return $HomomorphismFns.preimage_OLD(phi,y);
EndDefine; -- PreImage


// Added Nov 2017
// suggested expiration date: Nov 2019
Define Fact(N)
  println "--> WARNING: \"Fact\" is obsolescent";
  println "--> WARNING: use \"factorial\" instead";
  Return factorial(N);
EndDefine;

// Added Nov 2017
// suggested expiration date: Nov 2019
Define Factorial(N)
  println "--> WARNING: \"Factorial\" is obsolescent";
  println "--> WARNING: use \"factorial\" instead";
  Return factorial(N);
EndDefine;

-- CoCoA-5.2.2 -------------------------------------------------------------
  
// added Sept 2017
// Suggested expiration date: Sept 2019
define minimalized(I)
  println "--> WARNING: \"minimalized\" obsolescent from CoCoA-5.2.2";
  if type(I) = IDEAL then
    println "--> WARNING: use \"IdealOfMinGens(I)\" instead.";
    return IdealOfMinGens(I);
  else // MODULE
    println "--> WARNING: use \"SubmoduleOfMinGens(I)\" instead.";
    return SubmoduleOfMinGens(I);
  endif;
enddefine; -- minimalized


// added Sept 2017
// Suggested expiration date: Sept 2019
define minimalize(ref I)
  println "--> WARNING: \"minimalize\" obsolescent from CoCoA-5.2.2";
  if type(I) = IDEAL then
    println "--> WARNING: use \"I := IdealOfMinGens(I)\" instead.";
    I := IdealOfMinGens(I);
  else // MODULE
    println "--> WARNING: use \"M := SubmoduleOfMinGens(M)\" instead.";
    M := SubmoduleOfMinGens(I);
  endif;
enddefine; -- minimalize

Define Minimalize(ref I) minimalize(ref I); EndDefine;
Define Minimalized(I) Return minimalized(ref I); EndDefine;


// added Sept 2017
// Suggested expiration date: Sept 2019
define SubalgebraRepr(...)
  println "--> WARNING: \"SubalgebraRepr\" obsolescent from CoCoA-5.2.2";
  println "--> WARNING: use \"preimage0 / ker\" of \"SubalgebraHom(R, L)\" instead.";
  if not(len(ARGV) isin [2,3]) then error("2 or 3 arguments"); endif;
  if len(ARGV) = 3 then
    P := ARGV[1];
    f := ARGV[2];
    L := ARGV[3];
    phi := SubalgebraHom(ARGV[1], ARGV[3]);
  endif;
  if len(ARGV) = 2 then
    f := ARGV[1];
    L := ARGV[2];
    P := NewPolyRing(CoeffRing(RingOf(L[1])), SymbolRange("x",1,len(L)));
    phi := SubalgebraHom(P, L);
  endif;
  PI := preimage0(phi, f);
  return record[
		IsInImage := IsZero(f) or not(IsZero(PI)),
		OnePreImage := PI,
		ker := ker(phi)
		];
enddefine; -- SubalgebraRepr

-- CoCoA-5.2.4 -------------------------------------------------------------
// Added Apr 2018
// suggested expiration date: Apr 2020
Define FactorAlgExt(f)
  println "--> WARNING: \"FactorAlgExt\" obsolescent from CoCoA-5.2.4";
  println "--> WARNING: use \"factor\" instead";
  Return factor(f);
EndDefine;

// Added Apr 2018
// suggested expiration date: Apr 2020
Define PrimaryDecomposition0(I)
  println "--> WARNING: \"PrimaryDecomposition0\" obsolescent from CoCoA-5.2.4";
  println "--> WARNING: use \"PrimaryDecomposition\" instead";
  Return PrimaryDecomposition(I);
EndDefine;

-- CoCoA-5.2.6 -------------------------------------------------------------


endpackage;

